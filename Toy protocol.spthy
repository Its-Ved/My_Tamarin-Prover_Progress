/*
 *  Author: 
 *  Model Name: Toy protocol
 *  Status: INCOMPLETE
 *
 *  Comments: A -> B : Na 
               B -> A : Nb
               A -> ACK 
 */

theory 
begin

builtins:  symmetric-encryption
functions: KDF/1

// rules

rule Create_Identities:
  let
    
  in
    [ Fr(~aID), Fr(~bID)  ]
  --[  ]->
    [ AIdent (~aID,'INIT', 'EMPTY_STATE') , BIdent (~bID,'INIT', 'EMPTY_STATE' ) ]


rule A_1
    [Fr(~ANonce), AIdent (~aID,'INIT', 'EMPTY_STATE')]
    -->
    
    [AIdent(~aID,'SENT_NONCE', ~ANonce) Out(~ANonce)]

rule B_1
  let
    
  in
   [ BIdent (~bID,'INIT', 'EMPTY_STATE'),In(ANonce),Fr(BNonce)]
  -->
    [BIdent(~bID, 'SENT_NONCE', <ANonce, ~BNonce>)
    , Out(~BNonce) ]

rule A_2
     let
       SK =  KDF(~ANonce, BNonce)
     in
       [ AIdent(~aID,'SENT_NONCE', ~ANonce) Out(~ANonce),In(BNonce)]
     --[ AInstallsKey(~aID, ~ANonce, BNonce, SK)  ]->
       [ AIdent(~aID,'INSTALLED_KEY',<~ANonce,BNonce,SK>,Out('ACK')]

    rule B_2
    let 
           SK  =  KDF(~ANonce, BNonce)
           in 
           [BIdent(~bID,'INSTALLED_KEY',<ANonce,~BNonce,SK>),In('ACK')]
           --[BInstallsKey(~bID, ANonce, ~BNonce, SK)]->
           [BState(~bID, 'INSTALLED_KEY', <ANonce, ~BNonce, SK>)]
          
           lemma fire: 
           exists-trace

           "Ex bID aID ANonce BNonce SK #i #j.
           AInstallsKey(bID, ANonce, BNonce, SK) @ i &
        BInstallsKey(aID, ANonce, BNonce, SK) @ j"

               
           "









end