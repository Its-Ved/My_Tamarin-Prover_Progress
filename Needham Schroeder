INCOMPLETE...

/* Needham Schroeder Public Key */

/* 
    The protocol is semplified as follows: 
    A -> B: aenc((Na,pk(skA)), pk(skB))
    B -> A: aenc((Na,Nb), pk(skA))
    A -> B: aenc(Nb, pk(skB))
*/

theory NSPK3
begin

builtins: asymmetric-encryption

rule Register_pk:
    [ Fr(~ltkX) ]        // Generate new private key
    -->
    [ !Ltk($X, ~ltkX)    // Register the private key of the agent X
    , !Pk($X, pk(~ltkX)) // Register the public key of the agent X
    , Out(pk(~ltkX))     // Send the public key out to make sure it is available to attacker
    ]


rule Reveal_ltk:
    [ !Ltk(X, ltkX) ]    // Leaked key
    --[ RevLtk(X) ]->    // Action fact saying that X's key have been leaked
    [ Out(ltkX) ]        // Send it out


/* Protocol definition */
rule A_1:
    let 
        m1 = aenc(<~Na, $A>, pkB) // The message of step 1
    in
    [ Fr(~Na)                     // Generate a fresh nonce
    , !Pk($B, pkB)                // Get Bob's public key
    ]
    --[ Out_A_1(m1) ]->           // Action fact stating we sent out the message m1
    [ Out(m1)                     // Send out m1
    , St_A_1($A, $B, ~Na)         // Save the state of Alice
    ]

rule B_1:
    let 
        m1 = aenc(<Na, A>, pk(ltkB))    // Message we receive
        m2 = aenc(<Na, ~Nb>, pkA)       // Message we send
    in
    [ !Ltk($B, ltkB)                    // Get my private key
    , In(m1)                            // Receive message m1
    , !Pk(A, pkA)                       // Get other party public key (party may be ANYONE!)
    , Fr(~Nb)                           // Generate fresh nonce
    ]
  --[ ]->
    [ Out(m2)                           // Send out the second message
    , St_B_1($B, A, Na, ~Nb)            // Save state
    ]

rule A_2:
    let 
        m2 = aenc(<Na, Nb>, pk(ltkA))   // Message we receive
        m3 = aenc(Nb, pkB)              // Message we send (3rd message)
    in
    [ St_A_1(A, B, Na)                  // Recover state from last rule
    , !Ltk(A, ltkA)                     // Get private key of Alice
    , In(m2)                            // Get input message
    , !Pk(B, pkB)                       // Get public key of Bob
    ]
  --[ ]->
    [ Out(m3)                           // Send out m3
    , Secret(A, B, Na)                  // Create fact that Na is secret from Alice's point of view
    , Secret(A, B, Nb)                  // Create fact that Nb is secret from Alice's point of view 
    ]

rule B_2:
    let 
        m3 = aenc(Nb, pk(ltkB))
    in
    [ St_B_1(B, A, Na, Nb)              // Recover previous state
    , !Ltk(B, ltkB)                     // Recover Bob's private key
    , In(m3)                            // Receive message 3
    ]
  --
  -->
    [ Secret(B, A, Na)                  // Create fact that Na is secret from Bob's point of view
    , Secret(B, A, Nb)                  // Create fact that Nb is secret from Bob's point of view
    ]
